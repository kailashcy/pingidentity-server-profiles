
# Ref: https://dlmade.medium.com/ci-cd-with-github-action-and-aws-eks-5fd9714010cd
name: Deploy PF to GKE
on:
  push:
    tags: pf-v**

env:
  # Define the base Docker image repository and tag for PingFederate
  # Base images can be hosted on DockerHub or private registries
  BASE_IMAGE_REPOSITORY: registry.hub.docker.com/pingidentity
  BASE_IMAGE_TAG: 2411-12.1.4
  PRODUCT: pingfederate

  # Amazon Elastic Container Registry (ECR) repository details for storing the Docker image
  ECR_REPOSITORY: pingfederate
  ECR_REGISTRY: 528446573583.dkr.ecr.us-east-1.amazonaws.com

  # Amazon Elastic Kubernetes Service (EKS) cluster name and AWS region for deployment
  EKS_CLUSTER_NAME: pingdevops-cluster
  AWS_REGION: us-east-1


  # Specify the student namespace for isolation within the Kubernetes cluster
  # Example: STUDENT_NAMESPACE: "pingdevops-namespace-a"
  STUDENT_NAMESPACE: "pingdevops-namespace-a"


jobs:

  build:


    name: Build and deploy PingFederate to EKS

    runs-on: ubuntu-latest

    steps:

    # Set environment variables, including the release tag used for versioning
    - name: Set env
      id: vars
      run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}-${BASE_IMAGE_TAG}" >> $GITHUB_ENV

    # Check out the repository code
    - name: Check out code
      uses: actions/checkout@v2

    # Configure AWS credentials for authentication with AWS services
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    # Log in to Amazon ECR for pushing Docker images
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build the Docker image, tag it, and push it to Amazon ECR
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build \
        --build-arg BASE_IMAGE_REPOSITORY=$BASE_IMAGE_REPOSITORY \
        --build-arg PRODUCT=$PRODUCT \
        --build-arg BASE_IMAGE_TAG=$BASE_IMAGE_TAG \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_TAG \
        -f baseline/pingfederate/Dockerfile .
        echo "Image build completed"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_TAG
        echo "Image push completed"

    # Update kubeconfig to access the EKS cluster
    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    # Install Helm CLI for managing Kubernetes applications
    - name: Deploy Helm
      run: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
        sudo apt-get install helm
        sleep 5s
        echo "Helm installed"

        # Add and update the PingIdentity Helm repository
        helm repo add pingidentity https://helm.pingidentity.com/ 
        helm repo update 


        # Deploy the application using Helm, setting the appropriate parameters

        helm upgrade --install pingfederate-release pingidentity/ping-devops \
        --set global.envs.PING_IDENTITY_ACCEPT_EULA=YES \
        --set pingfederate-admin.image.tag=$RELEASE_TAG \
        --set pingfederate-engine.image.tag=$RELEASE_TAG \
        --set pingfederate-admin.image.repositoryFqn=$ECR_REGISTRY/$ECR_REPOSITORY \
        --set pingfederate-engine.image.repositoryFqn=$ECR_REGISTRY/$ECR_REPOSITORY \
        --version 0.10.0 \
        --namespace=$STUDENT_NAMESPACE \
        -f baseline/pingfederate/values.yaml


    - name: Post Deployment Healthcheck - PingFederate admin

      run: |
        #!/bin/bash
        # GitHub Action: Check Deployment Pods Readiness
        deployment_name="pingfederate-admin"
        namespace=${STUDENT_NAMESPACE}
        timeout_sec=300

        # Start time
        start_time=$(date +%s)

        # Check pod readiness
        while true; do
          elapsed_time=$(( $(date +%s) - start_time ))
          [ "$elapsed_time" -ge "$timeout_sec" ] && {
            echo "Timeout reached. Exiting with failure."; exit 1;
          }

          ready_replicas=$(kubectl get deployment "$deployment_name" -n "$namespace" -o jsonpath='{.status.readyReplicas}' 2>/dev/null)
          desired_replicas=$(kubectl get deployment "$deployment_name" -n "$namespace" -o jsonpath='{.status.replicas}' 2>/dev/null)

          [ "$ready_replicas" = "$desired_replicas" ] && {
            echo "Deployment '$deployment_name' is ready."; exit 0;
          }

          echo "Waiting for pods to become ready... Ready: ${ready_replicas:-0}, Desired: ${desired_replicas:-0}";
          sleep 5
        done
              
    - name: Post Deployment Healthcheck - PingFederate Engine

      run: |
        #!/bin/bash
        # GitHub Action: Check Deployment Pods Readiness
        deployment_name="pingfederate-engine"
        namespace="pingdevops-namespace-a"
        timeout_sec=500

        # Start time
        start_time=$(date +%s)

        # Check pod readiness
        while true; do
          elapsed_time=$(( $(date +%s) - start_time ))
          [ "$elapsed_time" -ge "$timeout_sec" ] && {
            echo "Timeout reached. Exiting with failure."; exit 1;
          }

          ready_replicas=$(kubectl get deployment "$deployment_name" -n "$namespace" -o jsonpath='{.status.readyReplicas}' 2>/dev/null)
          desired_replicas=$(kubectl get deployment "$deployment_name" -n "$namespace" -o jsonpath='{.status.replicas}' 2>/dev/null)

          [ "$ready_replicas" = "$desired_replicas" ] && {
            echo "Deployment '$deployment_name' is ready."; exit 0;
          }

          echo "Waiting for pods to become ready... Ready: ${ready_replicas:-0}, Desired: ${desired_replicas:-0}";
          sleep 5
        done


